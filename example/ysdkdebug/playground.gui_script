local druid = require("druid.druid")
local druid_style = require("example.ysdkdebug.druid_style")
local yagames = require("yagames.yagames")
local pg_adv = require("example.ysdkdebug.pg_adv")
local pg_auth = require("example.ysdkdebug.pg_auth")
local pg_config = require("example.ysdkdebug.pg_config")
local pg_device_info = require("example.ysdkdebug.pg_device_info")
local pg_feedback = require("example.ysdkdebug.pg_feedback")
local pg_leaderboards = require("example.ysdkdebug.pg_leaderboards")
local pg_payments = require("example.ysdkdebug.pg_payments")
local pg_player = require("example.ysdkdebug.pg_player")
local pg_screen = require("example.ysdkdebug.pg_screen")
local pg_shortcut = require("example.ysdkdebug.pg_shortcut")
local table_util = require("example.ysdkdebug.table_util")

local log_print = require("example.ysdkdebug.log_print")
local print = log_print.print

local function log_init(self)
    self.text_log = self.druid:new_text("text_log")

    log_print.clear_log()
end

local function log_update(self)
    if log_print.log_dirty then
        log_print.log_dirty = false
        self.text_log:set_to(log_print.log)
    end
end

local function event_test(self)
    yagames.event_on("HISTORY_BACK", function (self)
        print("yagames.event_on(\"HISTORY_BACK\")")
    end)

    -- yagames.event_dispatch("EXIT")
end

local function environment_handler(self)
    print("yagames.environment():", table_util.tostring(yagames.environment()))
end

local function clipboard_write_text_handler(self)
    yagames.clipboard_write_text(log_print.log, function (self, err)
        print("yagames.clipboard_write_text:", err or "OK")
    end)
end

local function test_error_handling_handler(self)
    print("(open the developer console to check)")
    yagames.clipboard_write_text("", function (self, err)
        error("This error is intended to test `dmScript::PCall()` and `sys.set_error_handler`.")
    end)
end

local function test_storage(self, err)
    if err then
        print("yagames.storage_init:", err)
        return
    end

    yagames.storage_clear()
    yagames.storage_set_item("storage_test_key", "value")
    assert(yagames.storage_length() == 1, "invalid storage length")
    assert(yagames.storage_get_item("storage_test_key") == "value", "invalid value from storage")
    assert(yagames.storage_get_item("non_exist_key") == nil, "invalid value from storage")
    yagames.storage_remove_item("non_exist_key")
    assert(yagames.storage_length() == 1, "invalid storage length")
    yagames.storage_remove_item("storage_test_key")
    assert(yagames.storage_length() == 0, "invalid storage length #2")
    yagames.storage_set_item("key_1", "value_1")
    yagames.storage_set_item("key_2", "value_2")
    assert(yagames.storage_length() == 2, "invalid storage length #3")
    local key0 = yagames.storage_key(0)
    assert(key0 == "key_1" or key0 == "key_2", "invalid key")
    assert(yagames.storage_key(2) == nil, "invalid key #2")

    print("safe storage test result:", "OK")
end

local function storage_test_handler(self)
    yagames.storage_init(test_storage)
end

function init(self)
    self.druid = druid.new(self, druid_style)

    log_init(self)
    pg_adv.init(self)
    pg_auth.init(self)
    pg_config.init(self)
    pg_device_info.init(self)
    pg_payments.init(self)
    pg_player.init(self)
    pg_leaderboards.init(self)
    pg_feedback.init(self)
    pg_screen.init(self)
    pg_shortcut.init(self)

    event_test(self)

    druid_style.make_button(self, "button_environment", environment_handler)
    druid_style.make_button(self, "button_storage_test", storage_test_handler)
    druid_style.make_button(self, "button_clipboard_write_text", clipboard_write_text_handler)
    druid_style.make_button(self, "button_test_error_handling", test_error_handling_handler)
    druid_style.make_button(self, "button_debug_log_clear", log_print.clear_log)
end

function final(self)
    self.druid:final()
end

function update(self, dt)
    self.druid:update(dt)

    log_update(self)
end

function on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end
